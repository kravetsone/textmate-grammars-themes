{
  "displayName": "Vein",
  "name": "vein",
  "patterns": [
    {
      "include": "#global_keywords"
    },
    {
      "include": "#operation-declaration"
    },
    {
      "include": "#comment"
    },
    {
      "include": "#preprocessor"
    },
    {
      "include": "#inline-class-declaration"
    },
    {
      "include": "#class-declaration"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#interpolated-string"
    },
    {
      "include": "#storage-types"
    },
    {
      "include": "#storage-modifier"
    },
    {
      "include": "#backslash-escapes"
    },
    {
      "include": "#union-declaration"
    },
    {
      "include": "#typdef-declaration"
    },
    {
      "include": "#types"
    },
    {
      "include": "#literal"
    }
  ],
  "repository": {
    "argument": {
      "patterns": [
        {
          "match": "\\b(ref|out|in)\\b",
          "name": "storage.modifier.vein"
        },
        {
          "include": "#global_keywords"
        },
        {
          "include": "#declaration-expression-local"
        }
      ]
    },
    "argument-list": {
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.parenthesis.open.vein"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.parenthesis.close.vein"
        }
      },
      "patterns": [
        {
          "include": "#argument"
        },
        {
          "include": "#expression"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "argument-list-raw": {
      "captures": {
        "1": {
          "name": "argument.item.vein",
          "patterns": [
            {
              "include": "#argument"
            },
            {
              "include": "#expression"
            },
            {
              "include": "#punctuation-comma"
            }
          ]
        }
      },
      "match": "\\,?\\s*((?:\\w+)+)\\s*"
    },
    "attribute": {
      "patterns": [
        {
          "include": "#type-name"
        },
        {
          "include": "#attribute-arguments"
        }
      ]
    },
    "attribute-arguments": {
      "begin": "(\\()",
      "beginCaptures": {
        "1": {
          "name": "punctuation.parenthesis.open.vein"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.parenthesis.close.vein"
        }
      },
      "patterns": [
        {
          "include": "#attribute-named-argument"
        },
        {
          "include": "#expression"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "attribute-section": {
      "begin": "(\\[)(assembly|module|field|event|method|param|property|return|type)?(\\:)?",
      "beginCaptures": {
        "1": {
          "name": "punctuation.squarebracket.open.vein"
        },
        "2": {
          "name": "keyword.other.attribute-specifier.vein"
        },
        "3": {
          "name": "punctuation.separator.colon.vein"
        }
      },
      "end": "(\\])",
      "endCaptures": {
        "1": {
          "name": "punctuation.squarebracket.close.vein"
        }
      },
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#attribute"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "backslash-escapes": {
      "match": "(?x)\\\\ (\n\\\\\t\t\t |\n[abefnprtv'\"?]   |\n[0-3][0-7]{,2}\t |\n[4-7]\\d?\t\t|\nx[a-fA-F0-9]{,2} |\nu[a-fA-F0-9]{,4} |\nU[a-fA-F0-9]{,8} )",
      "name": "constant.character.escape.vein"
    },
    "block": {
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.curlybrace.open.vein"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.curlybrace.close.vein"
        }
      },
      "patterns": [
        {
          "include": "#statement"
        }
      ]
    },
    "body-operation-statament": {
      "begin": "\\b(body)\\s+",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.body.vein"
        }
      },
      "end": "(?<=\\})",
      "patterns": [
        {
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.curlybrace.open.vein"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.curlybrace.close.vein"
            }
          },
          "patterns": [
            {
              "include": "#literal"
            },
            {
              "include": "#interpolated-string"
            },
            {
              "include": "#comment"
            },
            {
              "include": "#punctuation-accessor"
            },
            {
              "include": "#parenthesized-parameter-list"
            },
            {
              "include": "#generic-constraints"
            },
            {
              "include": "#expression-body"
            },
            {
              "include": "#block"
            },
            {
              "include": "#type"
            }
          ]
        }
      ]
    },
    "boolean-literal": {
      "patterns": [
        {
          "match": "(?<!\\.)\\btrue\\b",
          "name": "constant.language.boolean.true.vein"
        },
        {
          "match": "(?<!\\.)\\bfalse\\b",
          "name": "constant.language.boolean.false.vein"
        }
      ]
    },
    "char-character-escape": {
      "match": "\\\\(['\"\\\\0abfnrtv]|x[0-9a-fA-F]{1,4}|u[0-9a-fA-F]{4})",
      "name": "constant.character.escape.vein"
    },
    "char-literal": {
      "begin": "'",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.char.begin.vein"
        }
      },
      "end": "(\\')|((?:[^\\\\\\n])$)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.char.end.vein"
        },
        "2": {
          "name": "invalid.illegal.newline.vein"
        }
      },
      "name": "string.quoted.single.vein",
      "patterns": [
        {
          "include": "#char-character-escape"
        }
      ]
    },
    "class-declaration": {
      "begin": "\\b(class|struct|contract|extensions|interface)\\s+",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.class.vein"
        }
      },
      "end": "(?<=\\})",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "match": "@?[_[:alpha:]][_[:alnum:]]*",
          "name": "entity.name.type.class.vein"
        },
        {
          "include": "#punctuation-accessor"
        },
        {
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.curlybrace.open.vein"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.curlybrace.close.vein"
            }
          },
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "include": "#property-declaration"
            },
            {
              "include": "#field-declaration"
            },
            {
              "include": "#indexer-declaration"
            },
            {
              "include": "#punctuation-semicolon"
            },
            {
              "include": "#operation-declaration"
            },
            {
              "include": "#union-declaration"
            },
            {
              "include": "#storage-modifier"
            },
            {
              "include": "#constructor-declaration"
            },
            {
              "include": "#destructor-declaration"
            },
            {
              "include": "#method-declaration"
            },
            {
              "include": "#attribute-section"
            }
          ]
        }
      ]
    },
    "class-or-struct-members": {
      "patterns": [
        {
          "include": "#preprocessor"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#type-declarations"
        },
        {
          "include": "#property-declaration"
        },
        {
          "include": "#field-declaration"
        },
        {
          "include": "#event-declaration"
        },
        {
          "include": "#indexer-declaration"
        },
        {
          "include": "#variable-initializer"
        },
        {
          "include": "#constructor-declaration"
        },
        {
          "include": "#destructor-declaration"
        },
        {
          "include": "#storage-modifier"
        },
        {
          "include": "#operator-declaration"
        },
        {
          "include": "#conversion-operator-declaration"
        },
        {
          "include": "#tor-declaration"
        },
        {
          "include": "#method-declaration"
        },
        {
          "include": "#attribute-section"
        },
        {
          "include": "#punctuation-semicolon"
        }
      ]
    },
    "comment": {
      "patterns": [
        {
          "begin": "/\\*",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.vein"
            }
          },
          "end": "\\*/",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.vein"
            }
          },
          "name": "comment.block.vein"
        },
        {
          "begin": "(^\\s+)?(?=//)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.vein"
            }
          },
          "end": "(?=$)",
          "patterns": [
            {
              "begin": "(?<!/)///(?!/)",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.comment.vein"
                }
              },
              "end": "(?=$)",
              "name": "comment.block.documentation.vein",
              "patterns": [
                {
                  "include": "#xml-doc-comment"
                }
              ]
            },
            {
              "begin": "(?<!/)//(?:(?!/)|(?=//))",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.comment.vein"
                }
              },
              "end": "(?=$)",
              "name": "comment.line.double-slash.vein"
            }
          ]
        }
      ]
    },
    "constructor-declaration": {
      "begin": "(new)(?>\\s?+)\\(((?>.)+)?\\)",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.new.vein"
        },
        "2": {
          "patterns": [
            {
              "include": "#operation-argument-list"
            }
          ]
        }
      },
      "end": "(?<=\\})|(?=;)",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#parenthesized-parameter-list"
        },
        {
          "include": "#generic-constraints"
        },
        {
          "include": "#expression-body"
        },
        {
          "include": "#block"
        },
        {
          "include": "#shortform-expression"
        }
      ]
    },
    "declaration-expression-local": {
      "captures": {
        "2": {
          "name": "entity.name.variable.local.vein"
        },
        "3": {
          "name": "entity.name.type"
        }
      },
      "match": "((?<variable_name>[a-zA-Z0-9]+)\\s?+\\:\\s?+(?<type_name>[a-zA-Z0-9]+))(,?)+"
    },
    "declarations": {
      "patterns": [
        {
          "include": "#type-declarations"
        },
        {
          "include": "#punctuation-semicolon"
        }
      ]
    },
    "destructor-declaration": {
      "begin": "(?<!\\.)(delete)(?>\\s?+)\\(((?>.)+)?\\)",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.new.vein"
        },
        "2": {
          "patterns": [
            {
              "include": "#operation-argument-list"
            }
          ]
        }
      },
      "end": "(?<=\\})|(?=;)",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#parenthesized-parameter-list"
        },
        {
          "include": "#generic-constraints"
        },
        {
          "include": "#expression-body"
        },
        {
          "include": "#block"
        },
        {
          "include": "#shortform-expression"
        }
      ]
    },
    "expression": {
      "patterns": [
        {
          "include": "#preprocessor"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#global_keywords"
        },
        {
          "include": "#checked-unchecked-expression"
        },
        {
          "include": "#typeof-or-default-expression"
        },
        {
          "include": "#nameof-expression"
        },
        {
          "include": "#throw-expression"
        },
        {
          "include": "#interpolated-string"
        },
        {
          "include": "#verbatim-interpolated-string"
        },
        {
          "include": "#this-or-base-expression"
        },
        {
          "include": "#conditional-operator"
        },
        {
          "include": "#expression-operators"
        },
        {
          "include": "#await-expression"
        },
        {
          "include": "#query-expression"
        },
        {
          "include": "#as-expression"
        },
        {
          "include": "#is-expression"
        },
        {
          "include": "#anonymous-method-expression"
        },
        {
          "include": "#object-creation-expression"
        },
        {
          "include": "#array-creation-expression"
        },
        {
          "include": "#anonymous-object-creation-expression"
        },
        {
          "include": "#invocation-expression"
        },
        {
          "include": "#member-access-expression"
        },
        {
          "include": "#element-access-expression"
        },
        {
          "include": "#cast-expression"
        },
        {
          "include": "#literal"
        },
        {
          "include": "#parenthesized-expression"
        },
        {
          "include": "#tuple-deconstruction-assignment"
        },
        {
          "include": "#initializer-expression"
        },
        {
          "include": "#expression-call"
        },
        {
          "include": "#identifier"
        }
      ]
    },
    "expression-call": {
      "begin": "(?x)([_$a-zA-Z][$\\w]*)\\s*\\(",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.member"
        }
      },
      "end": "(?=;|\\))",
      "name": "expression.invocation.vein",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#string-literal"
        },
        {
          "include": "#parenthesized-parameter-list"
        },
        {
          "include": "#expression-body"
        },
        {
          "include": "#argument-list-raw"
        }
      ]
    },
    "fail-statement": {
      "begin": "(?<!\\.)\\b(fail)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.flow.fail.vein"
        }
      },
      "end": "(?=;)",
      "patterns": [
        {
          "include": "#ref-modifier"
        },
        {
          "include": "#expression"
        }
      ]
    },
    "field-declaration": {
      "begin": "(@?[_[:alpha:]][_[:alnum:]]*)(?>\\s?+)\\:(?>\\s?+)(@?[_[:alpha:]][_[:alnum:]]*)\\s*(?!=>|==)(?=,|;|=|$)",
      "beginCaptures": {
        "1": {
          "name": "entity.name.variable.field.vein"
        },
        "2": {
          "name": "entity.name.type"
        }
      },
      "end": "(?=;)",
      "patterns": [
        {
          "match": "@?[_[:alpha:]][_[:alnum:]]*",
          "name": "entity.name.variable.field.vein"
        },
        {
          "include": "#punctuation-comma"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#variable-initializer"
        },
        {
          "include": "#class-or-struct-members"
        },
        {
          "include": "#expression"
        }
      ]
    },
    "for-statement": {
      "begin": "(?<!\\.)\\b(for)\\b\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.loop.for.vein"
        }
      },
      "end": "(?<=\\})|(?=;)",
      "patterns": [
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.parenthesis.open.vein"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.parenthesis.close.vein"
            }
          },
          "patterns": [
            {
              "include": "#local-variable-declaration"
            },
            {
              "include": "#expression"
            },
            {
              "include": "#punctuation-comma"
            },
            {
              "include": "#punctuation-semicolon"
            }
          ]
        },
        {
          "include": "#statement"
        }
      ]
    },
    "gc-modifier": {
      "beginCaptures": {
        "1": {
          "name": "keyword.control.gc.vein"
        },
        "4": {
          "name": "keyword.control.gc.vein"
        }
      },
      "match": "(?x)(gc)\\s+(((nocontrol|auto)\\;))",
      "name": "entity.operation.gc.vein"
    },
    "global_keywords": {
      "match": "^\\s*(self|gc|this)\\b\\s*",
      "name": "entity.name.type"
    },
    "identifier": {
      "match": "@?[_[:alpha:]][_[:alnum:]]*",
      "name": "variable.other.readwrite.vein"
    },
    "if-statement": {
      "begin": "(?<!\\.)\\b(if)\\b\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.conditional.if.vein"
        }
      },
      "end": "(?<=\\})|(?=;)",
      "patterns": [
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.parenthesis.open.vein"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.parenthesis.close.vein"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "include": "#statement"
        }
      ]
    },
    "indexer-declaration": {
      "begin": "(this)(?>\\s?+)\\[(.+)\\](?>\\s?+)\\:(?>\\s?+)(@?[_[:alpha:]][_[:alnum:]]*)",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.vein"
        },
        "2": {
          "patterns": [
            {
              "include": "#operation-argument-list"
            }
          ]
        },
        "3": {
          "name": "entity.name.type"
        }
      },
      "end": "(?=;)",
      "patterns": [
        {
          "match": "@?[_[:alpha:]][_[:alnum:]]*",
          "name": "entity.name.variable.field.vein"
        },
        {
          "include": "#punctuation-comma"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#variable-initializer"
        },
        {
          "include": "#class-or-struct-members"
        },
        {
          "include": "#literal"
        }
      ]
    },
    "inline-class-declaration": {
      "begin": "\\b(aspect|record)\\s+",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.class.vein"
        }
      },
      "end": "(?=;)|(?<=\\})",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "captures": {
            "2": {
              "name": "entity.name.variable.local.vein"
            },
            "3": {
              "name": "entity.name.type"
            }
          },
          "match": "((?<variable_name>[a-zA-Z0-9]+)\\s?+\\:\\s?+(?<type_name>[a-zA-Z0-9]+))(,?)+",
          "name": "ddd.dd"
        },
        {
          "match": "@?[_[:alpha:]][_[:alnum:]]*",
          "name": "entity.name.type.class.vein"
        },
        {
          "include": "#punctuation-accessor"
        },
        {
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.curlybrace.open.vein"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.curlybrace.close.vein"
            }
          },
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "include": "#property-declaration"
            },
            {
              "include": "#field-declaration"
            },
            {
              "include": "#indexer-declaration"
            },
            {
              "include": "#punctuation-semicolon"
            },
            {
              "include": "#operation-declaration"
            },
            {
              "include": "#union-declaration"
            },
            {
              "include": "#constructor-declaration"
            },
            {
              "include": "#destructor-declaration"
            },
            {
              "include": "#storage-modifier"
            },
            {
              "include": "#method-declaration"
            },
            {
              "include": "#attribute-section"
            }
          ]
        }
      ]
    },
    "interpolated-string": {
      "begin": "\\$\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.vein"
        }
      },
      "end": "(\")|((?:[^\\\\\\n])$)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.vein"
        },
        "2": {
          "name": "invalid.illegal.newline.vein"
        }
      },
      "name": "string.quoted.double.vein",
      "patterns": [
        {
          "include": "#string-character-escape"
        },
        {
          "include": "#interpolation"
        }
      ]
    },
    "interpolation": {
      "begin": "(?<=[^\\{]|^)((?:\\{\\{)*)(\\{)(?=[^\\{])",
      "beginCaptures": {
        "1": {
          "name": "string.quoted.double.vein"
        },
        "2": {
          "name": "punctuation.definition.interpolation.begin.vein"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.interpolation.end.vein"
        }
      },
      "name": "meta.interpolation.vein",
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "match": "(?<!\\.)\\b(global|char|this|base|using|auto|const|if|else|while|do|body|for|is|in|return|fail)\\b",
          "name": "keyword.control.vein"
        },
        {
          "match": "(?<!\\.)\\b(struct|record|union)\\b",
          "name": "keyword.control.core.vein"
        }
      ]
    },
    "line_continuation_character": {
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "constant.character.escape.line-continuation.vein"
            }
          },
          "match": "(\\\\)\\n"
        }
      ]
    },
    "literal": {
      "patterns": [
        {
          "include": "#boolean-literal"
        },
        {
          "include": "#null-literal"
        },
        {
          "include": "#numeric-literal"
        },
        {
          "include": "#char-literal"
        },
        {
          "include": "#string-literal"
        },
        {
          "include": "#verbatim-string-literal"
        },
        {
          "include": "#tuple-literal"
        }
      ]
    },
    "local-declaration": {
      "patterns": [
        {
          "include": "#local-constant-declaration"
        },
        {
          "include": "#local-variable-declaration"
        },
        {
          "include": "#local-function-declaration"
        }
      ]
    },
    "local-variable-declaration": {
      "begin": "(?x)\n(?:\n(?:(\\busing)\\s+)?\n(?:(\\bref)\\s+(?:(\\breadonly)\\s+)?)?(\\bauto|let\\b)|\n(?<type_name>\n(?:\n(?:ref\\s+(?:readonly\\s+)?)?\n(?:\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)?\n)\n)\n)\n)\\s+\n(\\g<identifier>)\\s*\n(?!=>)\n(?=,|;|=|\\))",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.using.vein"
        },
        "2": {
          "name": "storage.modifier.vein"
        },
        "3": {
          "name": "storage.modifier.vein"
        },
        "4": {
          "name": "keyword.other.var.vein"
        },
        "5": {
          "patterns": [
            {
              "include": "#type"
            }
          ]
        },
        "7": {
          "name": "variable.other.constant.local.vein"
        }
      },
      "end": "(?=;|\\))",
      "patterns": [
        {
          "include": "#global_keywords"
        },
        {
          "match": "@?[_[:alpha:]][_[:alnum:]]*",
          "name": "variable.other.constant.local.vein"
        },
        {
          "include": "#punctuation-comma"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#variable-initializer"
        }
      ]
    },
    "method-declaration": {
      "begin": "(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)(?>\\s?+)\\(((?>.)+)?\\)(?>\\s?+)\\:(?>\\s?+)(@?[_[:alpha:]][_[:alnum:]]*)\\s?+(\\|\\>)?",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.vein"
        },
        "2": {
          "patterns": [
            {
              "include": "#operation-argument-list"
            }
          ]
        },
        "3": {
          "name": "entity.name.type"
        }
      },
      "end": "(?<=\\})|(?=;)",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#global_keywords"
        },
        {
          "include": "#parenthesized-parameter-list"
        },
        {
          "include": "#generic-constraints"
        },
        {
          "include": "#expression-body"
        },
        {
          "include": "#block"
        },
        {
          "include": "#invocation-expression"
        },
        {
          "include": "#shortform-expression"
        }
      ]
    },
    "nameof-expression": {
      "begin": "(?<!\\.)\\b(nameof)\\b\\s*(\\()",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.nameof.vein"
        },
        "2": {
          "name": "punctuation.parenthesis.open.vein"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.parenthesis.close.vein"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "null-literal": {
      "match": "(?<!\\.)\\bnull\\b",
      "name": "constant.language.null.vein"
    },
    "numeric-literal": {
      "patterns": [
        {
          "match": "\\b0(x|X)[0-9a-fA-F_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\\b",
          "name": "constant.numeric.hex.vein"
        },
        {
          "match": "\\b0(b|B)[01_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\\b",
          "name": "constant.numeric.binary.vein"
        },
        {
          "match": "\\b([0-9_]+)?\\.[0-9_]+((e|E)(\\-?)[0-9]+)?(F|f|D|d|M|m|H|h)?\\b",
          "name": "constant.numeric.decimal.vein"
        },
        {
          "match": "\\b[0-9_]+(e|E)(\\-?)[0-9_]+(F|f|D|d|M|m|H|h)?\\b",
          "name": "constant.numeric.decimal.vein"
        },
        {
          "match": "\\b[0-9_]+(F|f|D|d|M|m|H|h)\\b",
          "name": "constant.numeric.decimal.vein"
        },
        {
          "match": "\\b[0-9_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\\b",
          "name": "constant.numeric.decimal.vein"
        },
        {
          "match": "\\b(NaN|Infinity)\\b",
          "name": "constant.numeric.decimal.vein"
        }
      ]
    },
    "object-creation-expression": {
      "patterns": [
        {
          "include": "#object-creation-with-parameters"
        },
        {
          "include": "#object-creation-expression-with-no-parameters"
        }
      ]
    },
    "object-creation-with-parameters": {
      "begin": "(new)\\s+([_[:alpha:]][_[:alnum:]]*)(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.new.vein"
        },
        "2": {
          "name": "entity.name.type",
          "patterns": [
            {
              "include": "#type"
            }
          ]
        }
      },
      "end": "(?<=\\))",
      "patterns": [
        {
          "include": "#argument-list"
        }
      ]
    },
    "operation-argument-list": {
      "captures": {
        "2": {
          "name": "entity.name.variable.local.vein"
        },
        "3": {
          "name": "entity.name.type"
        }
      },
      "match": "((?<variable_name>[a-zA-Z0-9]+)\\s?+\\:\\s?+(?<type_name>[a-zA-Z0-9]+))(,?)+"
    },
    "operation-declaration": {
      "begin": "\\b(operation)\\s+(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)(?<template_key><(\\S)>)?(\\(.+?\\)?)\\s?+(:)\\s?+(\\S+)(\\s?+(where)\\s?+(\\S+)\\s?+(is)\\s?+(struct|class))?",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.vein"
        },
        "10": {
          "name": "constant.numeric.generic.vein"
        },
        "11": {
          "name": "keyword.type"
        },
        "12": {
          "name": "keyword.type"
        },
        "2": {
          "name": "entity.name.function.vein"
        },
        "4": {
          "name": "constant.numeric.generic.vein"
        },
        "5": {
          "patterns": [
            {
              "include": "#operation-argument-list"
            }
          ]
        },
        "6": {
          "name": "keyword.operator.vein"
        },
        "7": {
          "name": "entity.name.type"
        },
        "9": {
          "name": "keyword.type"
        }
      },
      "end": "(?<=\\})",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#gc-modifier"
        },
        {
          "include": "#sync-modifier"
        },
        {
          "include": "#body-operation-statament"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "match": "(?<![\\w$])(sizeof)(?![\\w$])",
          "name": "keyword.operator.sizeof.vein"
        },
        {
          "match": "--",
          "name": "keyword.operator.decrement.vein"
        },
        {
          "match": "\\+\\+",
          "name": "keyword.operator.increment.vein"
        },
        {
          "match": "%=|\\+=|-=|\\*=|(?<!\\()/=",
          "name": "keyword.operator.assignment.compound.vein"
        },
        {
          "match": "&=|\\^=|<<=|>>=|\\|=",
          "name": "keyword.operator.assignment.compound.bitwise.vein"
        },
        {
          "match": "<<|>>",
          "name": "keyword.operator.bitwise.shift.vein"
        },
        {
          "match": "!=|<=|>=|==|<|>",
          "name": "keyword.operator.comparison.vein"
        },
        {
          "match": "&&|!|\\|\\|",
          "name": "keyword.operator.logical.vein"
        },
        {
          "match": "&|\\||\\^|~",
          "name": "keyword.operator.vein"
        },
        {
          "match": "=",
          "name": "keyword.operator.assignment.vein"
        },
        {
          "match": "%|\\*|/|-|\\+",
          "name": "keyword.operator.vein"
        }
      ]
    },
    "parenthesized-parameter-list": {
      "begin": "(\\()",
      "beginCaptures": {
        "0": {
          "name": "punctuation.parenthesis.open.vein"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "0": {
          "name": "punctuation.parenthesis.close.vein"
        }
      },
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#attribute-section"
        },
        {
          "include": "#parameter"
        },
        {
          "include": "#punctuation-comma"
        },
        {
          "include": "#variable-initializer"
        }
      ]
    },
    "preprocessor": {
      "match": "^\\s*((#)\\s*(use|space|load|ignore))\\b\\s*",
      "name": "meta.preprocessor.vein"
    },
    "property-accessors": {
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.curlybrace.open.vein"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.curlybrace.close.vein"
        }
      },
      "patterns": [
        {
          "match": "\\b(private|protected|internal)\\b",
          "name": "storage.modifier.vein"
        },
        {
          "match": "\\b(get)\\b",
          "name": "keyword.other.get.vein"
        },
        {
          "match": "\\b(set)\\b",
          "name": "keyword.other.set.vein"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#attribute-section"
        },
        {
          "include": "#expression-body"
        },
        {
          "include": "#block"
        },
        {
          "include": "#punctuation-semicolon"
        }
      ]
    },
    "property-declaration": {
      "begin": "(@?[_[:alpha:]][_[:alnum:]]*)(?>\\s?+)\\:(?>\\s?+)(@?[_[:alpha:]][_[:alnum:]]*)\\s*(?=\\{|=>|\\|\\>|$)",
      "beginCaptures": {
        "1": {
          "name": "entity.name.variable.field.vein"
        },
        "2": {
          "name": "entity.name.type"
        }
      },
      "end": "(?<=\\})",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#property-accessors"
        },
        {
          "include": "#expression-body"
        },
        {
          "include": "#variable-initializer"
        },
        {
          "include": "#class-or-struct-members"
        },
        {
          "include": "#expression"
        }
      ]
    },
    "punctuation-accessor": {
      "match": "\\.",
      "name": "punctuation.accessor.vein"
    },
    "punctuation-comma": {
      "match": ",",
      "name": "punctuation.separator.comma.vein"
    },
    "punctuation-hash": {
      "match": "#",
      "name": "punctuation.separator.hash.vein"
    },
    "punctuation-semicolon": {
      "match": ";",
      "name": "punctuation.terminator.statement.vein"
    },
    "return-statement": {
      "begin": "(?<!\\.)\\b(return)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.flow.return.vein"
        }
      },
      "end": "(?=;)",
      "patterns": [
        {
          "include": "#ref-modifier"
        },
        {
          "include": "#expression"
        }
      ]
    },
    "shortform-expression": {
      "begin": "(\\|>)\\s?+",
      "beginCaptures": {
        "1": {
          "name": "entity.operator.pipe.vein"
        }
      },
      "end": "(?=;)",
      "patterns": [
        {
          "include": "#expression-call"
        },
        {
          "include": "#fail-statement"
        },
        {
          "include": "#expression"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#global_keywords"
        },
        {
          "include": "#expression-call"
        }
      ]
    },
    "statement": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#while-statement"
        },
        {
          "include": "#do-statement"
        },
        {
          "include": "#for-statement"
        },
        {
          "include": "#foreach-statement"
        },
        {
          "include": "#if-statement"
        },
        {
          "include": "#else-part"
        },
        {
          "include": "#switch-statement"
        },
        {
          "include": "#goto-statement"
        },
        {
          "include": "#return-statement"
        },
        {
          "include": "#fail-statement"
        },
        {
          "include": "#break-or-continue-statement"
        },
        {
          "include": "#throw-statement"
        },
        {
          "include": "#yield-statement"
        },
        {
          "include": "#await-statement"
        },
        {
          "include": "#try-statement"
        },
        {
          "include": "#checked-unchecked-statement"
        },
        {
          "include": "#lock-statement"
        },
        {
          "include": "#using-statement"
        },
        {
          "include": "#labeled-statement"
        },
        {
          "include": "#local-declaration"
        },
        {
          "include": "#block"
        },
        {
          "include": "#expression"
        },
        {
          "include": "#punctuation-semicolon"
        }
      ]
    },
    "storage-modifier": {
      "patterns": [
        {
          "match": "\\b(gc|override|contract|native|virtual|abstract|forwarded|getter|setter|public|special|protected|internal|private|static|readonly|const|extern|auto|extensions)\\b",
          "name": "storage.modifier"
        }
      ]
    },
    "string-character-escape": {
      "match": "\\\\(['\"\\\\0abfnrtv]|x[0-9a-fA-F]{1,4}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4})",
      "name": "constant.character.escape.vein"
    },
    "string-literal": {
      "begin": "(?<!@)\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.vein"
        }
      },
      "end": "(\")|((?:[^\\\\\\n])$)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.vein"
        },
        "2": {
          "name": "invalid.illegal.newline.vein"
        }
      },
      "name": "string.quoted.double.vein",
      "patterns": [
        {
          "include": "#string-character-escape"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.vein"
            }
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.vein"
            }
          },
          "name": "string.quoted.double.vein",
          "patterns": [
            {
              "include": "#string_escaped_char"
            },
            {
              "include": "#string_placeholder"
            },
            {
              "include": "#line_continuation_character"
            }
          ]
        },
        {
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.vein"
            }
          },
          "end": "'",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.vein"
            }
          },
          "name": "string.quoted.single.vein",
          "patterns": [
            {
              "include": "#string_escaped_char"
            },
            {
              "include": "#line_continuation_character"
            }
          ]
        }
      ]
    },
    "sync-modifier": {
      "beginCaptures": {
        "1": {
          "name": "keyword.control.sync.vein"
        },
        "4": {
          "name": "keyword.control.sync.vein"
        }
      },
      "match": "(?x)(sync)\\s+(((nocontrol|auto|inheritable)\\;)|\\{)",
      "name": "entity.operation.sync.vein"
    },
    "this-or-base-expression": {
      "captures": {
        "1": {
          "name": "keyword.other.base.vein"
        },
        "2": {
          "name": "keyword.other.this.vein"
        },
        "3": {
          "name": "entity.name.type"
        }
      },
      "match": "\\b(?:(base)|(this)|(self))\\b"
    },
    "throw-statement": {
      "begin": "(?<!\\.)\\b(fail)([\\w\\W\\d\\D\\s\\n]+)(?=;)",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.flow.fail.vein"
        },
        "2": {
          "name": "mana.expression",
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        }
      },
      "end": "(?=;)",
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "typdef-declaration": {
      "begin": "(\\#typedef)\\s+",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.typedef.vein"
        }
      },
      "end": "(?<=\\=)",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "match": "@?[_[:alpha:]][_[:alnum:]]*",
          "name": "entity.name.type.class.vein"
        },
        {
          "include": "#punctuation-accessor"
        },
        {
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.curlybrace.open.vein"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.curlybrace.close.vein"
            }
          },
          "patterns": [
            {
              "include": "#punctuation-semicolon"
            }
          ]
        }
      ]
    },
    "type": {
      "name": "meta.type.vein",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#ref-modifier"
        },
        {
          "include": "#readonly-modifier"
        },
        {
          "include": "#type-builtin"
        },
        {
          "include": "#type-name"
        },
        {
          "include": "#type-arguments"
        },
        {
          "include": "#type-array-suffix"
        }
      ]
    },
    "type-arguments": {
      "begin": "<",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.typeparameters.begin.vein"
        }
      },
      "end": ">",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.typeparameters.end.vein"
        }
      },
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#type"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "type-builtin": {
      "patterns": [
        {
          "include": "#types"
        }
      ]
    },
    "type-name": {
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "entity.name.type.alias.vein"
            },
            "2": {
              "name": "punctuation.separator.coloncolon.vein"
            }
          },
          "match": "(@?[_[:alpha:]][_[:alnum:]]*)\\s*(\\:\\:)"
        },
        {
          "captures": {
            "1": {
              "name": "entity.name.type"
            },
            "2": {
              "name": "punctuation.accessor.vein"
            }
          },
          "match": "(@?[_[:alpha:]][_[:alnum:]]*)\\s*(\\.)"
        },
        {
          "captures": {
            "1": {
              "name": "punctuation.accessor.vein"
            },
            "2": {
              "name": "entity.name.type"
            }
          },
          "match": "(\\.)\\s*(@?[_[:alpha:]][_[:alnum:]]*)"
        },
        {
          "match": "@?[_[:alpha:]][_[:alnum:]]*",
          "name": "entity.name.type"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "match": "(byte|float|double|bool|string|void|([ui|i](nt16|nt32|nt64)))\\b",
          "name": "support.type.vein"
        },
        {
          "match": "\\b%?(invalid)\\b",
          "name": "invalid.deprecated"
        }
      ]
    },
    "union-declaration": {
      "begin": "\\b(union)\\s+",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.union.vein"
        }
      },
      "end": "(?<=\\})",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "match": "@?[_[:alpha:]][_[:alnum:]]*",
          "name": "entity.name.type.union.vein"
        },
        {
          "include": "#punctuation-accessor"
        },
        {
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.curlybrace.open.vein"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.curlybrace.close.vein"
            }
          },
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "include": "#punctuation-semicolon"
            },
            {
              "include": "#operation-declaration"
            },
            {
              "include": "#comment"
            },
            {
              "include": "#property-declaration"
            },
            {
              "include": "#field-declaration"
            }
          ]
        }
      ]
    },
    "variable-initializer": {
      "begin": "(?<!=|!)(=)(?!=|>)",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.assignment.vein"
        }
      },
      "end": "(?=[,\\)\\];}])",
      "patterns": [
        {
          "include": "#ref-modifier"
        },
        {
          "include": "#expression"
        }
      ]
    }
  },
  "scopeName": "source.vein"
}
